def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

process{

    errorStrategy = 'retry'
    maxRetries = 2

    withLabel:process_low {
        cpus         = { check_max( 2 * task.attempt, 'cpus' ) }
        memory       = { check_max( 15.GB * task.attempt, 'memory' ) }
        time         = { check_max( 24.h, 'time' ) }
    }
    withLabel:process_medium {
        cpus         = { check_max( 4 * task.attempt, 'cpus' ) }
        memory       = { check_max( 30.GB * task.attempt, 'memory' ) }
        time         = { check_max( 24.h, 'time' ) }
    }
    withLabel:process_high {
        cpus         = { check_max( 8 * task.attempt, 'cpus' ) }
        memory       = { check_max( 60.GB * task.attempt, 'memory' ) }
        time         = { check_max( 24.h, 'time' ) }
    }
    withName: 'BWAMEM1_MEM|BWAMEM2_MEM' {
        cpus         = { check_max( 16 * task.attempt, 'cpus' ) }
        memory       = { check_max( 120.GB * task.attempt, 'memory' ) }
        time         = { check_max( 24.h, 'time' ) }
    }
    withName:'GATK4_APPLYBQSR|GATK4_APPLYBQSR_SPARK|GATK4_BASERECALIBRATOR|SAMTOOLS_STATS'{
        cpus         = { check_max( 8 * task.attempt, 'cpus' ) }
        memory       = { check_max( 60.GB * task.attempt, 'memory' ) }
        time         = { check_max( 24.h, 'time' ) }
    }
    withName:'GATK4_APPLYBQSR|GATK4_APPLYBQSR_SPARK|GATK4_BASERECALIBRATOR|GATK4_GATHERBQSRREPORTS'{
        cpus         = { check_max( 8 * task.attempt, 'cpus' ) }
        memory       = { check_max( 60.GB * task.attempt, 'memory' ) }
        time         = { check_max( 24.h, 'time' ) }
    }
    withName: 'GATK4_MARKDUPLICATES'{
        cpus         = { check_max( 16 * task.attempt, 'cpus' ) }
        memory       = { check_max( 120.GB * task.attempt, 'memory' ) }
        time         = { check_max( 48.h, 'time' ) }
        queue        = "${PW_ONDEMAND_JOB_QUEUE}"
    }
    withName: 'FREEBAYES|SAMTOOLS_STATS|SAMTOOLS_INDEX|UNZIP' {
        cpus         = { check_max( 4 * task.attempt, 'cpus' ) }
        memory       = { check_max( 30.GB * task.attempt, 'memory' ) }
        time         = { check_max( 24.h, 'time' ) }
    }
}

docker.registry     = 'quay.io'
apptainer.registry  = 'quay.io'