{
  "ui": {},
  "form": {
    "title": "Microbial 16S Analysis (nf-core/ampliseq)",
    "type": "object",
    "required": ["FW_primer", "RV_primer"],
    "properties": {
      "FW_primer": {
        "type": "string",
        "title": "Forward Primer",
        "description": "Forward PCR primer sequence",
        "help_text": "In amplicon sequencing methods, PCR with specific primers produces the amplicon of interest. These primer sequences need to be trimmed from the reads before further processing and are also required for producing an appropriate classifier. Do not use here any technical sequence such as adapter sequences but only the primer sequence that matches the biological amplicon.",
        "default": "GTGYCAGCMGCCGCGGTAA"
      },
      "RV_primer": {
        "type": "string",
        "title": "Reverse Primer",
        "description": "Reverse PCR primer sequence",
        "help_text": "In amplicon sequencing methods, PCR with specific primers produces the amplicon of interest. These primer sequences need to be trimmed from the reads before further processing and are also required for producing an appropriate classifier. Do not use here any technical sequence such as adapter sequences but only the primer sequence that matches the biological amplicon.",
        "default": "GGACTACNVGGGTWTCTAAT"
      },
      "metadata_category": {
        "type": "string",
        "title": "Metadata Category",
        "description": "(optional) Column in metadata table used to compare samples"
      },
      "sequencing_input": {
          "title": "Sequencing Input",
          "type": "object",
          "properties": {
              "min_read_counts": {
                  "type": "integer",
                  "default": 1,
                  "title": "Minimum Read Counts",
                  "description": "Set read count threshold for failed samples.",
                  "help_text": "Samples with less reads than this threshold at input or after trimming stop the pipeline. Using `--ignore_empty_input_files` or `--ignore_failed_trimming` ignores samples with read numbers below the threshold and lets the pipeline continue with less samples.",
                  "fa_icon": "fas fa-greater-than-equal"
              },
              "ignore_empty_input_files": {
                  "type": "boolean",
                  "title": "Ignore Empty Input Files",
                  "description": "Ignore input files with reads below the minimum number defined above.",
                  "help_text": "Ignore input files with less reads than specified by `--min_read_counts` and continue the pipeline without those samples.",
                  "default": true
              },
              "only_use_forward_reads": {
                  "type": "boolean",
                  "description": "Forward Reads Only",
                  "title": "Any R2 reads will be ignored, if present",
                  "default": false
              }
          }
      },
      "primer_removal": {
        "title": "Primer removal",
        "type": "object",
        "properties": {
            "retain_untrimmed": {
                "type": "boolean",
                "title": "Retain untrimmed",
                "description": "Cutadapt will retain untrimmed reads, choose only if input reads are not expected to contain primer sequences.",
                "help_text": "When read sequences are trimmed, untrimmed read pairs are discarded routinely. Use this option to retain untrimmed read pairs. This is usually not recommended and is only of advantage for specific protocols that prevent sequencing PCR primers. "
            },
            "cutadapt_min_overlap": {
                "type": "integer",
                "title": "Cutadapt - minimum overlap",
                "default": 3,
                "description": "Sets the minimum overlap for valid matches of primer sequences with reads for cutadapt (-O)."
            },
            "cutadapt_max_error_rate": {
                "type": "number",
                "title": "Cutadapt - maximum error rate",
                "default": 0.1,
                "description": "Sets the maximum error rate for valid matches of primer sequences with reads for cutadapt (-e)."
            },
            "double_primer": {
                "type": "boolean",
                "title": "Double primer removal",
                "description": "Cutadapt can be run twice to ensure removal of potential double primers",
                "help_text": "Cutdapt will be run twice, first to remove reads without primers (default), then a second time to remove reads that erroneously contain a second set of primers, not to be used with `--retain_untrimmed`."
            },
            "ignore_failed_trimming": {
                "type": "boolean",
                "title": "Ignore failed trimming",
                "description": "Ignore files with too few reads after trimming.",
                "default": true
            }
        }
      },
      "read_trimming_and_quality_filtering": {
        "title": "Read trimming and quality filtering",
        "type": "object",
        "description": "",
        "default": "",
        "properties": {
            "trunclenf": {
                "type": "integer",
                "default": 0,
                "title": "Truncation Length - Forward Strand",
                "description": "DADA2 read truncation value for forward strand, set this to 0 for no truncation",
                "help_text": "Read denoising by DADA2 creates an error profile specific to a sequencing run and uses this to correct sequencing errors. This method prefers when all reads to have the same length and as high quality as possible while maintaining at least 20 bp overlap for merging. One cutoff for the forward read `--trunclenf` and one for the reverse read `--trunclenr` truncate all longer reads at that position and drop all shorter reads.\nIf not set, these cutoffs will be determined automatically for the position before the mean quality score drops below `--trunc_qmin`.\n\nFor example:\n\n```bash\n--trunclenf 180 --trunclenr 120\n```\n\nPlease note:\n\n1. Overly aggressive truncation might lead to insufficient overlap for read merging\n2. Too little truncation might reduce denoised reads\n3. The code choosing these values automatically cannot take the points above into account, therefore checking read numbers is essential"
            },
            "trunclenr": {
                "type": "integer",
                "default": 0,
                "title": "Truncation Length - Reverse Strand",
                "description": "DADA2 read truncation value for reverse strand, set this to 0 for no truncation",
                "help_text": "Read denoising by DADA2 creates an error profile specific to a sequencing run and uses this to correct sequencing errors. This method prefers when all reads to have the same length and as high quality as possible while maintaining at least 20 bp overlap for merging. One cutoff for the forward read `--trunclenf` and one for the reverse read `--trunclenr` truncate all longer reads at that position and drop all shorter reads.\nIf not set, these cutoffs will be determined automatically for the position before the mean quality score drops below `--trunc_qmin`.\n\nFor example:\n\n```bash\n--trunclenf 180 --trunclenr 120\n```\n\nPlease note:\n\n1. Overly aggressive truncation might lead to insufficient overlap for read merging\n2. Too little truncation might reduce denoised reads\n3. The code choosing these values automatically cannot take the points above into account, therefore checking read numbers is essential"
            },
            "trunc_qmin": {
                "type": "integer",
                "default": 25,
                "title": "Truncation Quality Minimum",
                "description": "If --trunclenf and --trunclenr are not set, these values will be automatically determined using this median quality score",
                "help_text": "Automatically determine `--trunclenf` and `--trunclenr` before the median quality score drops below `--trunc_qmin`. The fraction of reads retained is defined by `--trunc_rmin`, which might override the quality cutoff.\n\nFor example:\n\n```bash\n--trunc_qmin 35\n```\n\nPlease note:\n\n1. The code choosing `--trunclenf` and `--trunclenr` using `--trunc_qmin` automatically cannot take amplicon length or overlap requirements for merging into account, therefore use with caution.\n2. A minimum value of 25 is recommended. However, high quality data with a large paired sequence overlap might justify a higher value (e.g. 35). Also, very low quality data might require a lower value.\n3. If the quality cutoff is too low to include a certain fraction of reads that is specified by `--trunc_rmin` (e.g. 0.75 means at least 75% percent of reads are retained), a lower cutoff according to `--trunc_rmin` superseeds the quality cutoff."
            },
            "trunc_rmin": {
                "type": "number",
                "default": 0.75,
                "title": "Truncation - Minimum Read Fraction",
                "description": "Assures that values chosen with --trunc_qmin will retain a fraction of reads.",
                "help_text": "Value can range from 0 to 1. 0 means no reads need to be retained and 1 means all reads need to be retained. The minimum lengths of --trunc_qmin and --trunc_rmin are chosen as DADA2 cutoffs.",
                "minimum": 0,
                "maximum": 1
            },
            "max_ee": {
                "type": "integer",
                "default": 2,
                "title": "DADA2: max_ee",
                "description": "DADA2 read filtering option",
                "help_text": "After truncation, reads with higher than `max_ee` \"expected errors\" will be discarded. In case of very long reads, you might want to increase this value.  We recommend (to start with) a value corresponding to approximately 1 expected error per 100-200 bp (default: 2)"
            },
            "min_len": {
                "type": "integer",
                "default": 50,
                "title": "DADA2: min_len",
                "description": "DADA2 read filtering option",
                "help_text": "Remove reads with length less than `min_len` after trimming and truncation."
            },
            "max_len": {
                "type": "integer",
                "title": "DADA2: max_len",
                "description": "DADA2 read filtering option",
                "help_text": "Remove reads with length greater than `max_len` after trimming and truncation. Must be a positive integer."
            }
        }
    },
    "amplicon_sequence_variants_asv_calculation": {
        "title": "Amplicon Sequence Variants (ASV) calculation",
        "type": "object",
        "description": "",
        "default": "",
        "properties": {
            "sample_inference": {
                "type": "string",
                "title": "Sample Inference",
                "default": "independent",
                "help_text": "If samples are treated independent (lowest sensitivity and lowest resources), pooled (highest sensitivity and resources) or pseudo-pooled (balance between required resources and sensitivity).",
                "description": "Mode of sample inference: \"independent\", \"pooled\" or \"pseudo\"",
                "enum": ["independent", "pooled", "pseudo"]
            }
        }
    },
    "taxonomic_database": {
        "title": "Taxonomic database",
        "type": "object",
        "description": "",
        "default": "",
        "properties": {
            "dada_ref_taxonomy": {
                "type": "string",
                "title": "DADA2 Reference Taxonomy",
                "help_text": "Choose any of the supported databases, and optionally also specify the version. Database and version are separated by an equal sign (`=`, e.g. `silva=138`) . This will download the desired database, format it to produce a file that is compatible with DADA2's assignTaxonomy and another file that is compatible with DADA2's addSpecies.\n\nThe following databases are supported:\n- GTDB - Genome Taxonomy Database - 16S rRNA\n- PR2 - Protist Reference Ribosomal Database - 18S rRNA\n- RDP - Ribosomal Database Project  - 16S rRNA\n- SILVA ribosomal RNA gene database project  - 16S rRNA\n- UNITE - eukaryotic nuclear ribosomal ITS region  - ITS\n\nGenerally, using `gtdb`, `pr2`, `rdp`, `sbdi-gtdb`, `silva`, `unite-fungi`, or `unite-alleuk` will select the most recent supported version. For details on what values are valid, please either use an invalid value such as `x` (causing the pipeline to send an error message with a list of all valid values) or see `conf/ref_databases.config`.\n\nPlease note that commercial/non-academic entities [require licensing](https://www.arb-silva.de/silva-license-information) for SILVA v132 database (non-default) but not from v138 on (default).",
                "description": "Name of supported database, and optionally also version number",
                "default": "silva=138",
                "enum": [
                    "midori2-co1=gb250",
                    "midori2-co1",
                    "gtdb=R05-RS95",
                    "gtdb=R06-RS202",
                    "gtdb=R07-RS207",
                    "gtdb",
                    "coidb",
                    "coidb=221216",
                    "pr2=5.0.0",
                    "pr2=4.14.0",
                    "pr2=4.13.0",
                    "pr2",
                    "rdp=18",
                    "rdp",
                    "sbdi-gtdb",
                    "sbdi-gtdb=R07-RS207-1",
                    "sbdi-gtdb=R06-RS202-3",
                    "sbdi-gtdb=R06-RS202-1",
                    "silva=132",
                    "silva=138",
                    "silva",
                    "unite-fungi=9.0",
                    "unite-fungi=8.3",
                    "unite-fungi=8.2",
                    "unite-fungi",
                    "unite-alleuk=9.0",
                    "unite-alleuk=8.3",
                    "unite-alleuk=8.2",
                    "unite-alleuk"
                ]
            },
            "dada_ref_tax_custom": {
                "type": "string",
                "title": "DADA2 Custom Taxonomy (optional)",
                "description": "Used for the DADA2 addTaxonomy function. Must conform to expected syntax (>Kingom;Phylum;Class;Order;Family;Genus; ACGAATGTGAAGTAA....)",
                "file": "**/genome_fasta/**/genome.fasta",
                "pathType": "references"
            },
            "dada_ref_tax_custom_sp": {
                "type": "string",
                "title": "DADA2 Custom Species-Level Taxonomy (optional)",
                "description": "Used for the DADA2 addSpecies function. Must conform to expected syntax (>SeqID genus species ACGAATGTGAAGTAA......)",
                "file": "**/genome_fasta/**/genome.fasta",
                "pathType": "references"
            },
            "qiime_ref_taxonomy": {
                "type": "string",
                "title": "QIIME Reference Taxonomy",
                "help_text": "Choose any of the supported databases, and optionally also specify the version. Database and version are separated by an equal sign (`=`, e.g. `silva=138`) . This will download the desired database and initiate taxonomic classification with QIIME2 and the chosen database.\n\nIf both, `--dada_ref_taxonomy` and `--qiime_ref_taxonomy` are used, DADA2 classification will be used for downstream analysis.\n\nThe following databases are supported:\n- SILVA ribosomal RNA gene database project - 16S rRNA\n- UNITE - eukaryotic nuclear ribosomal ITS region - ITS\n- Greengenes (only testing!)\n\nGenerally, using `silva`, `unite-fungi`, or `unite-alleuk` will select the most recent supported version. For testing purposes, the tiny database `greengenes85` (dereplicated at 85% sequence similarity) is available. For details on what values are valid, please either use an invalid value such as `x` (causing the pipeline to send an error message with all valid values) or see `conf/ref_databases.config`.",
                "description": "Name of supported database, and optionally also version number",
                "default": "silva=138",
                "enum": [
                    "silva=138",
                    "silva",
                    "unite-fungi=8.3",
                    "unite-fungi=8.2",
                    "unite-fungi",
                    "unite-alleuk=9.0",
                    "unite-alleuk=8.3",
                    "unite-alleuk=8.2",
                    "unite-alleuk",
                    "greengenes85"
                ]
            },
            "sintax_ref_taxonomy": {
                "type": "string",
                "title": "Sintax Reference Taxonomy",
                "help_text": "Choose any of the supported databases, and optionally also specify the version. Database and version are separated by an equal sign (`=`, e.g. `coidb=221216`) . This will download the desired database and initiate taxonomic classification with USEARCH sintax and the chosen database, which if needed is formatted to produce a file that is compatible with USEARCH sintax.\n\nThe following databases are supported:\n- COIDB - eukaryotic Cytochrome Oxidase I (COI) from The Barcode of Life Data System (BOLD) - COI\n- UNITE - eukaryotic nuclear ribosomal ITS region - ITS\n\nGenerally, using `coidb`, `unite-fungi`, or `unite-alleuk` will select the most recent supported version. For details on what values are valid, please either use an invalid value such as `x` (causing the pipeline to send an error message with a list of all valid values) or see `conf/ref_databases.config`.",
                "description": "Name of supported database, and optionally also version number",
                "enum": [
                    "coidb",
                    "coidb=221216",
                    "unite-fungi=9.0",
                    "unite-fungi=8.3",
                    "unite-fungi=8.2",
                    "unite-fungi",
                    "unite-alleuk=9.0",
                    "unite-alleuk=8.3",
                    "unite-alleuk=8.2",
                    "unite-alleuk"
                ]
            }
        }
    },
    "asv_filtering": {
        "title": "ASV filtering",
        "type": "object",
        "description": "",
        "default": "",
        "properties": {
            "filter_ssu": {
                "type": "string",
                "title": "Filter SSU",
                "description": "Enable SSU filtering. Comma separated list of kingdoms in Barrnap.",
                "enum": [
                    "bac,arc,mito,euk",
                    "bac",
                    "arc",
                    "mito",
                    "euk",
                    "bac,arc",
                    "bac,mito",
                    "bac,euk",
                    "arc,mito",
                    "arc,euk",
                    "mito,euk",
                    "bac,arc,mito",
                    "bac,mito,euk",
                    "arc,mito,euk"
                ]
            },
            "min_len_asv": {
                "type": "integer",
                "title": "Minimum ASV length",
                "description": "Remove ASV that are below the minimum length threshold (default: filter is disabled, otherwise 1). Increasing the threshold might reduce false positive ASVs (e.g. PCR off-targets)."
            },
            "max_len_asv": {
                "type": "integer",
                "title": "Maximum ASV length",
                "description": "Remove ASV that are above the maximum length threshold (default: filter is disabled, otherwise 1000000). Lowering the threshold might reduce false positive ASVs (e.g. PCR off-targets)."
            },
            "exclude_taxa": {
                "type": "string",
                "title": "Exclude Taxa",
                "default": "mitochondria,chloroplast",
                "description": "Comma separated list of unwanted taxa, to skip taxa filtering use \"none\"",
                "help_text": "Depending on the primers used, PCR might amplify unwanted or off-target DNA. By default sequences originating from mitochondria or chloroplasts are removed. The taxa specified are excluded from further analysis.\nFor example to exclude any taxa that contain mitochondria, chloroplast, or archaea:\n\n```bash\n--exclude_taxa \"mitochondria,chloroplast,archaea\"\n```\n\nIf you prefer not filtering the data, specify:\n\n```bash\n--exclude_taxa \"none\"\n```\n\nPlease note the following requirements:\n\n1. Comma separated list enclosed in quotes\n2. May not contain whitespace characters\n3. Features that contain one or several of these terms in their taxonomical classification are excluded from further analysis\n4. The taxonomy level is not taken into consideration"
            },
            "min_frequency": {
                "type": "integer",
                "default": 1,
                "title": "Minimum Frequency",
                "description": "Remove entries from the feature table below an absolute abundance threshold (default: 1, meaning filter is disabled).",
                "help_text": "Singletons are often regarded as artifacts, choosing a value of 2 removes sequences with less than 2 total counts from the feature table.\n\nFor example to remove singletons choose:\n\n```bash\n--min_frequency 2\n```"
            },
            "min_samples": {
                "type": "integer",
                "default": 1,
                "title": "Minimum Samples",
                "description": "Filter out features which are found in fewer than this number of samples.",
                "help_text": "Filtering low prevalent features from the feature table, e.g. keeping only features that are present in at least two samples can be achived by choosing a value of 2 (default: 1, meaning filter is disabled). Typically only used when having replicates for all samples.\n\nFor example to retain features that are present in at least two sample:\n\n```bash\n--min_samples 2\n```\n\nPlease note this is independent of abundance."
            }
        }
      }
    }
  }
}
