profiles {
    standard {
        process {
            errorStrategy = 'retry'
            maxRetries = 5
        }
    }
}

params{
    max_memory                 = 488.GB
    max_cpus                   = 64
    max_time                   = 240.h
}

process{
    withLabel:process_low {
        cpus         = { check_max( CPU_LOW * task.attempt, 'cpus' ) }
        memory       = { check_max( MEM_LOW.GB * task.attempt, 'memory' ) }
        time         = { check_max( HRS_LOW.h * task.attempt, 'time' ) }
    }
    withLabel:process_medium {
        cpus         = { check_max( CPU_MED * task.attempt, 'cpus' ) }
        memory       = { check_max( MEM_MED.GB * task.attempt, 'memory' ) }
        time         = { check_max( HRS_MED.h * task.attempt, 'time' ) }
    }
    withLabel:process_high {
        cpus         = { check_max( CPU_HGH * task.attempt, 'cpus' ) }
        memory       = { check_max( MEM_HGH.GB * task.attempt, 'memory' ) }
        time         = { check_max( HRS_HGH.h * task.attempt, 'time' ) }
    }
    withName: 'BWAMEM1_MEM|BWAMEM2_MEM' {
        cpus         = { check_max( CPU_ALN * task.attempt, 'cpus' ) }
        memory       = { check_max( MEM_ALN.GB * task.attempt, 'memory' ) }
        time         = { check_max( HRS_ALN.h * task.attempt, 'time' ) }
    }
    withName:'GATK4_APPLYBQSR|GATK4_APPLYBQSR_SPARK|GATK4_BASERECALIBRATOR|SAMTOOLS_STATS'{
        cpus         = { check_max( CPU_REC * task.attempt, 'cpus' ) }
        memory       = { check_max( MEM_REC.GB * task.attempt, 'memory' ) }
        time         = { check_max( HRS_REC.h * task.attempt, 'time' ) }
    }
    withName:'GATK4_APPLYBQSR|GATK4_APPLYBQSR_SPARK|GATK4_BASERECALIBRATOR|GATK4_GATHERBQSRREPORTS'{
        cpus         = { check_max( CPU_REC * task.attempt, 'cpus' ) }
        memory       = { check_max( MEM_REC.GB * task.attempt, 'memory' ) }
        time         = { check_max( HRS_REC.h * task.attempt, 'time' ) }
    }
    withName: 'GATK4_MARKDUPLICATES'{
        cpus         = { check_max( CPU_MKD * task.attempt, 'cpus' ) }
        memory       = { check_max( MEM_MKD.GB * task.attempt, 'memory' ) }
        time         = { check_max( HRS_MKD.h * task.attempt, 'time' ) }
    }
    withName: 'FREEBAYES|SAMTOOLS_STATS|SAMTOOLS_INDEX|UNZIP' {
        cpus         = { check_max( CPU_FRB * task.attempt, 'cpus' ) }
        memory       = { check_max( MEM_FRB.GB * task.attempt, 'memory' ) }
        time         = { check_max( HRS_FRB.h * task.attempt, 'time' ) }
    }
}

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

params {
    tools = null
    wes = false
    trim_fastq = false
    clip_r1 = 0
    clip_r2 = 0
    three_prime_clip_r1 = 0
    three_prime_clip_r2 = 0
    trim_nextseq = 0
    save_trimmed = false
    pon = null
    vep_dbnsfp = false
    vep_loftee = false
    vep_spliceai = false
    vep_spliceregion = false
    genome = null
    intervals = null
    input: "manifest.csv"
}