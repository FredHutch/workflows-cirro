{
  "ui": {
    "analysis_type": {
      "tools": {
        "ui:widget": "checkboxes"
      }
    },
    "annotation": {
      "annotation_tool": {
        "ui:widget": "checkboxes"
      }
    },
    "read_trimming_options": {
      "trim_fastq": {
        "ui:widget": "radio"
      }
    }
  },
  "form": {
    "title": "nf-core/sarek",
    "description": "Sarek is a workflow for detecting and annotating germline/somatic variants in WGS, WES and gene panel data. If you require assistance setting up your workflow please contact hutchdatacore@fredhutch.org to discuss data formats and parameters.",
    "type": "object",
    "properties": {
      "analysis_type": {
        "title": "Experiment Design",
        "description": "Indiciate the analysis type (germline/somatic) and select high level parameters for the workflow.",
        "type": "object",
        "required": ["genome", "analysis_type", "tools", "wes"],
        "properties": {
          "genome": {
            "title": "Reference Genome",
            "type": "string",
            "default": "GATK.GRCh38",
            "enum": ["GATK.GRCh38", "GATK.GRCh37", "GRCm38"],
            "enumNames": [
              "Homo sapiens (GATK.GRCh38)",
              "Homo sapiens (GATK.GRCh37)",
              "Mus musculus (GRCm38)"
            ]
          },
          "wes": {
            "title": "Whole Exome/Targeted Gene Panel Assay",
            "description": "Please indicate if your data was generated using a capture kit.",
            "type": "boolean",
            "default": false
          },
          "intervals": {
            "title": "Genomic intervals",
            "description": "Target bed file in case of whole exome or targeted sequencing or intervals file for parallelization.",
            "type": "string",
            "pathType": "references",
            "file": "**/genome_bed/**/regions.bed"
          },
          "analysis_type": {
            "title": "Variant Calling Type",
            "default": "Germline Variant Calling",
            "enum": ["Germline Variant Calling", "Somatic Variant Calling"]
          }
        },
        "allOf": [
          {
            "if": {
              "properties": {
                "analysis_type": {
                  "const": "Germline Variant Calling"
                }
              }
            },
            "then": {
              "properties": {
                "tools": {
                  "title": "Germline variant calling tool(s)",
                  "description": "Please select one or more variant callers for your analysis.",
                  "type": "array",
                  "pattern": "^((cnvkit|deepvariant|freebayes|haplotypecaller|manta|mpileup|strelka|tiddit)*,?)*$",
                  "items": {
                    "type": "string",
                    "enum": [
                      "cnvkit",
                      "deepvariant",
                      "freebayes",
                      "haplotypecaller",
                      "manta",
                      "mpileup",
                      "strelka",
                      "tiddit"
                    ],
                    "enumNames": [
                      "CNVkit",
                      "DeepVariant",
                      "FreeBayes",
                      "HaplotypeCaller",
                      "Manta",
                      "mpileup",
                      "Strelka",
                      "TIDDIT"
                    ]
                  },
                  "uniqueItems": true
                }
              }
            }
          },
          {
            "if": {
              "properties": {
                "analysis_type": {
                  "const": "Somatic Variant Calling"
                }
              }
            },
            "then": {
              "properties": {
                "tools": {
                  "title": "Somatic variant calling tool(s)",
                  "description": "Please select one or more variant callers for your analysis.",
                  "type": "array",
                  "pattern": "^((ascat|controlfreec|cnvkit|freebayes|manta|msisensorpro|mutect2|strelka|tiddit)*,?)*$",
                  "items": {
                    "type": "string",
                    "enum": [
                      "ascat",
                      "controlfreec",
                      "cnvkit",
                      "freebayes",
                      "manta",
                      "msisensorpro",
                      "mutect2",
                      "strelka",
                      "tiddit"
                    ],
                    "enumNames": [
                      "ASCAT",
                      "Control-FREEC",
                      "CNVkit",
                      "FreeBayes",
                      "Manta",
                      "MSIsensorpro",
                      "Mutect2",
                      "Strelka",
                      "TIDDIT"
                    ]
                  },
                  "uniqueItems": true
                }
              }
            }
          }
        ]
      },
      "annotation": {
        "title": "Variant Annotation",
        "description": "Select variant annotation tools and VEP plugins.",
        "type": "object",
        "properties": {
          "annotation_tool": {
            "title": "Annotation tool(s)",
            "description": "Please select one or both variant annotation tools.",
            "type": "array",
            "pattern": "^((vep|snpeff)*,?)*$",
            "items": {
              "type": "string",
              "enum": ["vep", "snpeff"],
              "enumNames": ["Variant Effect Predictor (VEP)", "snpEff"]
            },
            "uniqueItems": true
          }
        },
        "if": {
          "properties": {
            "annotation_tool": {
              "contains": {
                "type": "string",
                "const": "vep"
              }
            }
          }
        },
        "then": {
          "properties": {
            "vep_dbnsfp": {
              "type": "boolean",
              "title": "dbNSFP plugin",
              "description": "Enable the use of the VEP dbNSFP plugin that retrieves data for missense variants.",
              "default": false
            },
            "vep_loftee": {
              "type": "boolean",
              "title": "LOFTEE plugin",
              "description": "Enable the use of the VEP LOFTEE plugin to identify LoF (loss-of-function) variation.",
              "default": false
            },
            "vep_spliceai": {
              "type": "boolean",
              "title": "SpliceAI plugin",
              "description": "Enable the use of the VEP SpliceAI plugin to annotate variants predicted effect on splicing.",
              "default": false
            },
            "vep_spliceregion": {
              "type": "boolean",
              "title": "SpliceRegion plugin",
              "description": "Enable the use of the VEP SpliceRegion plugin to provide granular predictions of splicing effects.",
              "default": false
            }
          }
        }
      },
      "read_trimming_options": {
        "title": "Read Trimming Options",
        "description": "Parameters for performing adapter and read trimming using Trim-Galore.",
        "type": "object",
        "properties": {
          "trim_fastq": {
            "type": "boolean",
            "title": "Trim reads using Trim-Galore?",
            "default": false
          }
        },
        "dependencies": {
          "trim_fastq": {
            "oneOf": [
              {
                "properties": {
                  "trim_fastq": {
                    "enum": [false]
                  }
                }
              },
              {
                "properties": {
                  "trim_fastq": {
                    "enum": [true]
                  },
                  "clip_r1": {
                    "type": "integer",
                    "title": "Clip R1",
                    "description": "Instructs Trim Galore to remove bp from the 5' end of read 1 (or single-end reads)."
                  },
                  "clip_r2": {
                    "type": "integer",
                    "title": "Clip R2",
                    "description": "Instructs Trim Galore to remove bp from the 5' end of read 2 (paired-end reads only)."
                  },
                  "three_prime_clip_r1": {
                    "type": "integer",
                    "title": "Three Prime Clip R1",
                    "description": "Instructs Trim Galore to remove bp from the 3' end of read 1 AFTER adapter/quality trimming has been performed."
                  },
                  "three_prime_clip_r2": {
                    "type": "integer",
                    "title": "Three Prime Clip R2",
                    "description": "Instructs Trim Galore to remove bp from the 3' end of read 2 AFTER adapter/quality trimming has been performed."
                  },
                  "trim_nextseq": {
                    "type": "integer",
                    "title": "Trim NextSeq",
                    "description": "Instructs Trim Galore to apply the --nextseq=X option, to trim based on quality after removing poly-G tails.",
                    "help_text": "This enables the option Cutadapt `--nextseq-trim=3'CUTOFF` option via Trim Galore, which will set a quality cutoff (that is normally given with -q instead), but qualities of G bases are ignored. This trimming is in common for the NextSeq- and NovaSeq-platforms, where basecalls without any signal are called as high-quality G bases."
                  },
                  "save_trimmed": {
                    "type": "boolean",
                    "title": "Save the trimmed FastQ files in the results directory?",
                    "default": false
                  }
                }
              }
            ]
          }
        }
      }
    }
  }
}
